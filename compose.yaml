services:
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    container_name: chat-backend
    restart: unless-stopped
    init: true
    volumes:
      - ./back:/app
      - /app/node_modules
    networks:
      - appnet
    ports:
      - "3001:3001"
      - "5555:5555"
    depends_on:
      - postgres

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: chat-frontend
    restart: unless-stopped
    init: true
    volumes:
      - ./front:/app
      - /app/node_modules
      - /app/.next
    networks:
      - appnet
    ports:
      - "3000:3000"
    depends_on:
      - backend

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    networks:
      - appnet
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:latest
    container_name: adminer
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - appnet
    ports:
      - "8080:8080"

networks:
  appnet:
    driver: bridge

volumes:
  pgdata:
